/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TranslationRouteImport } from './routes/translation'
import { Route as privateRouteRouteImport } from './routes/(private)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as privateOverviewDashboardRouteImport } from './routes/(private)/overview/dashboard'
import { Route as privateManagementTicketsRouteImport } from './routes/(private)/management/tickets'
import { Route as privateManagementClientsRouteImport } from './routes/(private)/management/clients'

const TranslationRoute = TranslationRouteImport.update({
  id: '/translation',
  path: '/translation',
  getParentRoute: () => rootRouteImport,
} as any)
const privateRouteRoute = privateRouteRouteImport.update({
  id: '/(private)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const privateOverviewDashboardRoute =
  privateOverviewDashboardRouteImport.update({
    id: '/overview/dashboard',
    path: '/overview/dashboard',
    getParentRoute: () => privateRouteRoute,
  } as any)
const privateManagementTicketsRoute =
  privateManagementTicketsRouteImport.update({
    id: '/management/tickets',
    path: '/management/tickets',
    getParentRoute: () => privateRouteRoute,
  } as any)
const privateManagementClientsRoute =
  privateManagementClientsRouteImport.update({
    id: '/management/clients',
    path: '/management/clients',
    getParentRoute: () => privateRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof privateRouteRouteWithChildren
  '/translation': typeof TranslationRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/management/clients': typeof privateManagementClientsRoute
  '/management/tickets': typeof privateManagementTicketsRoute
  '/overview/dashboard': typeof privateOverviewDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof privateRouteRouteWithChildren
  '/translation': typeof TranslationRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/management/clients': typeof privateManagementClientsRoute
  '/management/tickets': typeof privateManagementTicketsRoute
  '/overview/dashboard': typeof privateOverviewDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(private)': typeof privateRouteRouteWithChildren
  '/translation': typeof TranslationRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/(private)/management/clients': typeof privateManagementClientsRoute
  '/(private)/management/tickets': typeof privateManagementTicketsRoute
  '/(private)/overview/dashboard': typeof privateOverviewDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/translation'
    | '/auth/login'
    | '/auth/register'
    | '/management/clients'
    | '/management/tickets'
    | '/overview/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/translation'
    | '/auth/login'
    | '/auth/register'
    | '/management/clients'
    | '/management/tickets'
    | '/overview/dashboard'
  id:
    | '__root__'
    | '/'
    | '/(private)'
    | '/translation'
    | '/auth/login'
    | '/auth/register'
    | '/(private)/management/clients'
    | '/(private)/management/tickets'
    | '/(private)/overview/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  privateRouteRoute: typeof privateRouteRouteWithChildren
  TranslationRoute: typeof TranslationRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/translation': {
      id: '/translation'
      path: '/translation'
      fullPath: '/translation'
      preLoaderRoute: typeof TranslationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)': {
      id: '/(private)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/overview/dashboard': {
      id: '/(private)/overview/dashboard'
      path: '/overview/dashboard'
      fullPath: '/overview/dashboard'
      preLoaderRoute: typeof privateOverviewDashboardRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/(private)/management/tickets': {
      id: '/(private)/management/tickets'
      path: '/management/tickets'
      fullPath: '/management/tickets'
      preLoaderRoute: typeof privateManagementTicketsRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/(private)/management/clients': {
      id: '/(private)/management/clients'
      path: '/management/clients'
      fullPath: '/management/clients'
      preLoaderRoute: typeof privateManagementClientsRouteImport
      parentRoute: typeof privateRouteRoute
    }
  }
}

interface privateRouteRouteChildren {
  privateManagementClientsRoute: typeof privateManagementClientsRoute
  privateManagementTicketsRoute: typeof privateManagementTicketsRoute
  privateOverviewDashboardRoute: typeof privateOverviewDashboardRoute
}

const privateRouteRouteChildren: privateRouteRouteChildren = {
  privateManagementClientsRoute: privateManagementClientsRoute,
  privateManagementTicketsRoute: privateManagementTicketsRoute,
  privateOverviewDashboardRoute: privateOverviewDashboardRoute,
}

const privateRouteRouteWithChildren = privateRouteRoute._addFileChildren(
  privateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  privateRouteRoute: privateRouteRouteWithChildren,
  TranslationRoute: TranslationRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
