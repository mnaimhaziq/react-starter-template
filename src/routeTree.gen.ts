/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TranslationRouteImport } from './routes/translation'
import { Route as privateRouteRouteImport } from './routes/(private)/route'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as publicPricingRouteImport } from './routes/(public)/pricing'
import { Route as privateSettingsRouteImport } from './routes/(private)/settings'
import { Route as privateProfileRouteImport } from './routes/(private)/profile'
import { Route as privateOverviewDashboardRouteImport } from './routes/(private)/overview/dashboard'
import { Route as privateManagementTicketsRouteImport } from './routes/(private)/management/tickets'
import { Route as privateManagementClientsIndexRouteImport } from './routes/(private)/management/clients/index'
import { Route as privateManagementClientsAddRouteImport } from './routes/(private)/management/clients/add'

const TranslationRoute = TranslationRouteImport.update({
  id: '/translation',
  path: '/translation',
  getParentRoute: () => rootRouteImport,
} as any)
const privateRouteRoute = privateRouteRouteImport.update({
  id: '/(private)',
  getParentRoute: () => rootRouteImport,
} as any)
const publicIndexRoute = publicIndexRouteImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const publicPricingRoute = publicPricingRouteImport.update({
  id: '/(public)/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const privateSettingsRoute = privateSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => privateRouteRoute,
} as any)
const privateProfileRoute = privateProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => privateRouteRoute,
} as any)
const privateOverviewDashboardRoute =
  privateOverviewDashboardRouteImport.update({
    id: '/overview/dashboard',
    path: '/overview/dashboard',
    getParentRoute: () => privateRouteRoute,
  } as any)
const privateManagementTicketsRoute =
  privateManagementTicketsRouteImport.update({
    id: '/management/tickets',
    path: '/management/tickets',
    getParentRoute: () => privateRouteRoute,
  } as any)
const privateManagementClientsIndexRoute =
  privateManagementClientsIndexRouteImport.update({
    id: '/management/clients/',
    path: '/management/clients/',
    getParentRoute: () => privateRouteRoute,
  } as any)
const privateManagementClientsAddRoute =
  privateManagementClientsAddRouteImport.update({
    id: '/management/clients/add',
    path: '/management/clients/add',
    getParentRoute: () => privateRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/translation': typeof TranslationRoute
  '/profile': typeof privateProfileRoute
  '/settings': typeof privateSettingsRoute
  '/pricing': typeof publicPricingRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/management/tickets': typeof privateManagementTicketsRoute
  '/overview/dashboard': typeof privateOverviewDashboardRoute
  '/management/clients/add': typeof privateManagementClientsAddRoute
  '/management/clients': typeof privateManagementClientsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/translation': typeof TranslationRoute
  '/profile': typeof privateProfileRoute
  '/settings': typeof privateSettingsRoute
  '/pricing': typeof publicPricingRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/management/tickets': typeof privateManagementTicketsRoute
  '/overview/dashboard': typeof privateOverviewDashboardRoute
  '/management/clients/add': typeof privateManagementClientsAddRoute
  '/management/clients': typeof privateManagementClientsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(private)': typeof privateRouteRouteWithChildren
  '/translation': typeof TranslationRoute
  '/(private)/profile': typeof privateProfileRoute
  '/(private)/settings': typeof privateSettingsRoute
  '/(public)/pricing': typeof publicPricingRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/(public)/': typeof publicIndexRoute
  '/(private)/management/tickets': typeof privateManagementTicketsRoute
  '/(private)/overview/dashboard': typeof privateOverviewDashboardRoute
  '/(private)/management/clients/add': typeof privateManagementClientsAddRoute
  '/(private)/management/clients/': typeof privateManagementClientsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/translation'
    | '/profile'
    | '/settings'
    | '/pricing'
    | '/auth/login'
    | '/auth/register'
    | '/management/tickets'
    | '/overview/dashboard'
    | '/management/clients/add'
    | '/management/clients'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/translation'
    | '/profile'
    | '/settings'
    | '/pricing'
    | '/auth/login'
    | '/auth/register'
    | '/management/tickets'
    | '/overview/dashboard'
    | '/management/clients/add'
    | '/management/clients'
  id:
    | '__root__'
    | '/(private)'
    | '/translation'
    | '/(private)/profile'
    | '/(private)/settings'
    | '/(public)/pricing'
    | '/auth/login'
    | '/auth/register'
    | '/(public)/'
    | '/(private)/management/tickets'
    | '/(private)/overview/dashboard'
    | '/(private)/management/clients/add'
    | '/(private)/management/clients/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  privateRouteRoute: typeof privateRouteRouteWithChildren
  TranslationRoute: typeof TranslationRoute
  publicPricingRoute: typeof publicPricingRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  publicIndexRoute: typeof publicIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/translation': {
      id: '/translation'
      path: '/translation'
      fullPath: '/translation'
      preLoaderRoute: typeof TranslationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)': {
      id: '/(private)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/pricing': {
      id: '/(public)/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof publicPricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/settings': {
      id: '/(private)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof privateSettingsRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/(private)/profile': {
      id: '/(private)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof privateProfileRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/(private)/overview/dashboard': {
      id: '/(private)/overview/dashboard'
      path: '/overview/dashboard'
      fullPath: '/overview/dashboard'
      preLoaderRoute: typeof privateOverviewDashboardRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/(private)/management/tickets': {
      id: '/(private)/management/tickets'
      path: '/management/tickets'
      fullPath: '/management/tickets'
      preLoaderRoute: typeof privateManagementTicketsRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/(private)/management/clients/': {
      id: '/(private)/management/clients/'
      path: '/management/clients'
      fullPath: '/management/clients'
      preLoaderRoute: typeof privateManagementClientsIndexRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/(private)/management/clients/add': {
      id: '/(private)/management/clients/add'
      path: '/management/clients/add'
      fullPath: '/management/clients/add'
      preLoaderRoute: typeof privateManagementClientsAddRouteImport
      parentRoute: typeof privateRouteRoute
    }
  }
}

interface privateRouteRouteChildren {
  privateProfileRoute: typeof privateProfileRoute
  privateSettingsRoute: typeof privateSettingsRoute
  privateManagementTicketsRoute: typeof privateManagementTicketsRoute
  privateOverviewDashboardRoute: typeof privateOverviewDashboardRoute
  privateManagementClientsAddRoute: typeof privateManagementClientsAddRoute
  privateManagementClientsIndexRoute: typeof privateManagementClientsIndexRoute
}

const privateRouteRouteChildren: privateRouteRouteChildren = {
  privateProfileRoute: privateProfileRoute,
  privateSettingsRoute: privateSettingsRoute,
  privateManagementTicketsRoute: privateManagementTicketsRoute,
  privateOverviewDashboardRoute: privateOverviewDashboardRoute,
  privateManagementClientsAddRoute: privateManagementClientsAddRoute,
  privateManagementClientsIndexRoute: privateManagementClientsIndexRoute,
}

const privateRouteRouteWithChildren = privateRouteRoute._addFileChildren(
  privateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  privateRouteRoute: privateRouteRouteWithChildren,
  TranslationRoute: TranslationRoute,
  publicPricingRoute: publicPricingRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  publicIndexRoute: publicIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
